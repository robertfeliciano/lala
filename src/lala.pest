program = _{ SOI ~ NEWLINE* ~ (stmt ~ NEWLINE+)* ~ stmt? ~ EOI }

stmt = _{ fun_decl | expr | command }

LPAREN = _{"("}
RPAREN = _{")"}

LET = _{"let"}
FUN = _{"fun"}

LBRACE = _{"{"}
RBRACE = _{"}"}

EQUAL = _{"="}
ARROW = _{"=>"}

SEMI = _{";"}

params = {ident*}
body = {(stmt ~ NEWLINE*)+ }
fun_decl = {
  FUN ~ ident ~ EQUAL ~ LPAREN ~ params ~ RPAREN ~ ARROW ~
  LBRACE ~ NEWLINE* ~ body ~ RBRACE
}

expr = {
    assn
  | monadic
  | dyadic
  | app
  | ident
  | matrix
  | terms
}

app_param = _{
	ident
	| matrix
    | monadic
    | dyadic
    | app
}
app = { ident ~ LPAREN ~ app_param* ~ RPAREN }

monadic = { verb ~ expr }

dyadic = { (monadic | terms | ident ) ~ verb ~ expr }

assn = { LET ~ ident ~ EQUAL ~ expr }

matrix = {
    (terms ~ SEMI ~ NEWLINE?)+ ~ terms ~ SEMI?
}

vector = { terms ~ SEMI?}

terms = { term+ }

term = _{
    decimal
  | integer
  | LPAREN ~ expr ~ RPAREN
}

verb = {
    "#" // rank

  | "?" // inverse

  | "rref" // rref

  | "%" // transpose

  | "det" // determinant

  | "@" // dot prod

  | "++" // matrix addition

  | "**" // elem wise multiplication

  | "!" // scalar multiplication

  // more to come later
}

NEG = _{"-"}

integer = @{ NEG? ~ ASCII_DIGIT+ }

decimal = @{
    (NEG? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT*)
  | (NEG? ~ ASCII_DIGIT ~ "e" ~ NEG? ~ ASCII_DIGIT)
}

ident = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

cmd = @{
	ASCII_ALPHANUMERIC+
}

cmd_param = @{ (!WHITESPACE~ ASCII_ALPHANUMERIC)+ }
cmd_params = { cmd_param* }

command = { "/" ~ cmd ~ cmd_params }

WHITESPACE = _{ " " | "\t" }

COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" | "//" ~ (!"\n" ~ ANY)* }